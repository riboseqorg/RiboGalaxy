{"version": "0.1", "tests": [{"id": "functional.test_toolbox.TestForTool_bowtie_genomic_wrapper.test_tool_000000", "has_data": true, "data": {"tool_id": "bowtie_genomic_wrapper", "tool_version": "1.5.0", "test_index": 0, "time_seconds": 329.50710248947144, "inputs": {"refGenomeSource|genomeSource": "history", "refGenomeSource|ownFile": {"src": "hda", "id": "2891970512fa2d5a"}, "singlePaired|sInput1": {"src": "hda", "id": "5729865256bc2525"}, "singlePaired|sPaired": "single", "singlePaired|sParams|alignModeOption|alignMode": "nMode", "singlePaired|sParams|sSettingsType": "full", "singlePaired|sParams|sSuppressAlign": "1"}, "job": {"command_line": "python '/home/jack/.planemo/planemo_tmp_o1s7b83v/bowtie_genomic_wrapper.py' --threads=\"${GALAXY_SLOTS:-4}\" --output=\"/tmp/tmppm0mar_u/files/d/a/0/dataset_da0ee6ce-4245-4ba0-aef8-df308b8d3368.dat\" --galaxy_input_format=\"fastqsanger\" --dataType=\"solexa\" --suppressHeader=\"false\" --genomeSource=\"history\" --ref=\"/tmp/tmppm0mar_u/files/3/c/4/dataset_3c4a76f1-4a70-46a8-b27d-96170c60e2c3.dat\" --indexSettings=\"indexPreSet\" --paired=\"single\" --input1=\"/tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat\" --params=\"full\" --skip=\"0\" --alignLimit=\"-1\" --trimH=\"0\" --trimL=\"0\" --mismatchSeed=\"2\" --mismatchQual=\"70\" --seedLen=\"25\" --rounding=\"round\" --forwardAlign=\"forward\" --reverseAlign=\"reverse\" --tryHard=\"noTryHard\" --allValAligns=\"noAllValAligns\" --valAlign=\"1\" --suppressAlign=\"1\" --best=\"noBest\" --maxBacktracks=\"125\" --offrate=\"-1\" --seed=\"-1\"", "command_version": "bowtie-align version 1.2\n64-bit\nBuilt on testing-gce-ab28e1d1-a823-4ae9-9c55-f53e1e445058\nSat May  6 18:08:00 UTC 2017\nCompiler: gcc version 4.8.5 (GCC) \nOptions: -O3 -m64 -I/home/jack/anaconda3/envs/mulled-v1-5ed0788ef4e12302ad740e4a72f0eace5ca7da74ab2245aa2f82730656ba1009/include -L/home/jack/anaconda3/envs/mulled-v1-5ed0788ef4e12302ad740e4a72f0eace5ca7da74ab2245aa2f82730656ba1009/lib -Wl,--hash-style=both -DWITH_TBB -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1  \nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "create_time": "2022-05-27T12:50:19.699573", "dependencies": [], "exit_code": 0, "external_id": "818317", "galaxy_version": "22.01", "history_id": "2891970512fa2d5a", "id": "54f2a3a23292eb07", "inputs": {"ownFile": {"id": "2891970512fa2d5a", "src": "hda", "uuid": "3c4a76f1-4a70-46a8-b27d-96170c60e2c3"}, "sInput1": {"id": "5729865256bc2525", "src": "hda", "uuid": "f0f066ef-ca55-477a-8cc7-b9427f9fcda9"}}, "job_messages": [], "job_metrics": [], "job_stderr": "", "job_stdout": "Settings:\n  Output files: \"/tmp/tmpn8brh6dt/tmpx_intd9d.*.ebwt\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 5 (one in 32)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 4\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /tmp/tmpn8brh6dt/tmpx_intd9d\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:02\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:01\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:04\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.52238e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 22095017\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22095018\nGetting block 2 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15055849\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15055850\nGetting block 3 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12584116\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12584117\nGetting block 4 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13506021\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13506022\nGetting block 5 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 13461130\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13461131\nGetting block 6 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 14859175\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 14859176\nGetting block 7 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12979486\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12979487\nGetting block 8 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17249749\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17249750\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for call to driver() for forward index: 00:01:36\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:01\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:01\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 8; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.73986e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 21964658\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 21964659\nGetting block 2 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 19924613\n  (Using difference cover)\n  Sorting block time: 00:00:09\nReturning block of 19924614\nGetting block 3 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 22562257\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22562258\nGetting block 4 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 11698683\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 11698684\nGetting block 5 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15450821\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15450822\nGetting block 6 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13105963\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 13105964\nGetting block 7 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17083549\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17083550\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for backward call to driver() for mirror index: 00:01:38\nbowtie -q   -p 1 -S        -n 2 -e 70 -l 25      --maxbts 125  -k 1  -m 1          --phred33-quals  /tmp/tmpn8brh6dt/tmpx_intd9d /tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat | samtools view -bS > /tmp/tmppm0mar_u/files/d/a/0/dataset_da0ee6ce-4245-4ba0-aef8-df308b8d3368.dat\nFile indexed. Sequence file aligned.\n", "model_class": "Job", "output_collections": {}, "outputs": {"output": {"id": "54f2a3a23292eb07", "src": "hda", "uuid": "da0ee6ce-4245-4ba0-aef8-df308b8d3368"}}, "params": {"__input_ext": "\"fasta\"", "chromInfo": "\"/tmp/tmppm0mar_u/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "refGenomeSource": "{\"__current_case__\": 1, \"genomeSource\": \"history\", \"indexParams\": {\"__current_case__\": 0, \"indexSettings\": \"indexPreSet\"}, \"ownFile\": {\"values\": [{\"id\": 1, \"src\": \"hda\"}]}}", "save_mapping_stats": "\"false\"", "singlePaired": "{\"__current_case__\": 0, \"sInput1\": {\"values\": [{\"id\": 2, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"sParams\": {\"__current_case__\": 1, \"alignModeOption\": {\"__current_case__\": 0, \"alignMode\": \"nMode\", \"sMismatchQual\": \"70\", \"sMismatchSeed\": \"2\", \"sRounding\": \"round\", \"sSeedLen\": \"25\"}, \"sAlignLimit\": \"-1\", \"sAllValAlignsOption\": {\"__current_case__\": 0, \"sAllValAligns\": \"noAllValAligns\", \"sValAlign\": \"1\"}, \"sBestOption\": {\"__current_case__\": 0, \"sBest\": \"noBest\", \"sTryHardOption\": {\"__current_case__\": 0, \"sTryHard\": \"noTryHard\", \"snMaxBacktracks\": \"125\"}}, \"sForwardAlign\": \"forward\", \"sMaxFile\": \"false\", \"sOffrate\": \"-1\", \"sReverseAlign\": \"reverse\", \"sSeed\": \"-1\", \"sSettingsType\": \"full\", \"sSkip\": \"0\", \"sSuppressAlign\": \"1\", \"sTrimH\": \"0\", \"sTrimL\": \"0\", \"sUnmappedFile\": \"false\"}}", "suppressHeader": "\"false\""}, "state": "ok", "stderr": "", "stdout": "Settings:\n  Output files: \"/tmp/tmpn8brh6dt/tmpx_intd9d.*.ebwt\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 5 (one in 32)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 4\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /tmp/tmpn8brh6dt/tmpx_intd9d\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:02\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:01\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:04\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.52238e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 22095017\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22095018\nGetting block 2 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15055849\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15055850\nGetting block 3 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12584116\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12584117\nGetting block 4 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13506021\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13506022\nGetting block 5 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 13461130\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13461131\nGetting block 6 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 14859175\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 14859176\nGetting block 7 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12979486\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12979487\nGetting block 8 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17249749\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17249750\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for call to driver() for forward index: 00:01:36\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:01\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:01\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 8; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.73986e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 21964658\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 21964659\nGetting block 2 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 19924613\n  (Using difference cover)\n  Sorting block time: 00:00:09\nReturning block of 19924614\nGetting block 3 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 22562257\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22562258\nGetting block 4 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 11698683\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 11698684\nGetting block 5 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15450821\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15450822\nGetting block 6 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13105963\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 13105964\nGetting block 7 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17083549\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17083550\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for backward call to driver() for mirror index: 00:01:38\nbowtie -q   -p 1 -S        -n 2 -e 70 -l 25      --maxbts 125  -k 1  -m 1          --phred33-quals  /tmp/tmpn8brh6dt/tmpx_intd9d /tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat | samtools view -bS > /tmp/tmppm0mar_u/files/d/a/0/dataset_da0ee6ce-4245-4ba0-aef8-df308b8d3368.dat\nFile indexed. Sequence file aligned.\n\nSettings:\n  Output files: \"/tmp/tmpn8brh6dt/tmpx_intd9d.*.ebwt\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 5 (one in 32)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 4\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /tmp/tmpn8brh6dt/tmpx_intd9d\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:02\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:01\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:04\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.52238e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 22095017\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22095018\nGetting block 2 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15055849\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15055850\nGetting block 3 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12584116\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12584117\nGetting block 4 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13506021\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13506022\nGetting block 5 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 13461130\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13461131\nGetting block 6 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 14859175\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 14859176\nGetting block 7 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12979486\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12979487\nGetting block 8 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17249749\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17249750\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for call to driver() for forward index: 00:01:36\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:01\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:01\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 8; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.73986e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 21964658\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 21964659\nGetting block 2 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 19924613\n  (Using difference cover)\n  Sorting block time: 00:00:09\nReturning block of 19924614\nGetting block 3 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 22562257\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22562258\nGetting block 4 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 11698683\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 11698684\nGetting block 5 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15450821\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15450822\nGetting block 6 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13105963\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 13105964\nGetting block 7 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17083549\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17083550\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for backward call to driver() for mirror index: 00:01:38\nbowtie -q   -p 1 -S        -n 2 -e 70 -l 25      --maxbts 125  -k 1  -m 1          --phred33-quals  /tmp/tmpn8brh6dt/tmpx_intd9d /tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat | samtools view -bS > /tmp/tmppm0mar_u/files/d/a/0/dataset_da0ee6ce-4245-4ba0-aef8-df308b8d3368.dat\nFile indexed. Sequence file aligned.\n", "tool_id": "bowtie_genomic_wrapper", "tool_stderr": "", "tool_stdout": "Settings:\n  Output files: \"/tmp/tmpn8brh6dt/tmpx_intd9d.*.ebwt\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 5 (one in 32)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 4\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /tmp/tmpn8brh6dt/tmpx_intd9d\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:02\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:01\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:04\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.52238e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 22095017\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22095018\nGetting block 2 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15055849\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15055850\nGetting block 3 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12584116\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12584117\nGetting block 4 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13506021\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13506022\nGetting block 5 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 13461130\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 13461131\nGetting block 6 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 14859175\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 14859176\nGetting block 7 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 12979486\n  (Using difference cover)\n  Sorting block time: 00:00:06\nReturning block of 12979487\nGetting block 8 of 8\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17249749\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17249750\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for call to driver() for forward index: 00:01:36\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:01\nbmax according to bmaxDivN setting: 30447637\nUsing parameters --bmax 22835728 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 22835728 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:02\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:01\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 8; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\n  Binary sorting into buckets\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Binary sorting into buckets time: 00:00:03\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1.73986e+07 (target: 22835727)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 21964658\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 21964659\nGetting block 2 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 19924613\n  (Using difference cover)\n  Sorting block time: 00:00:09\nReturning block of 19924614\nGetting block 3 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 22562257\n  (Using difference cover)\n  Sorting block time: 00:00:10\nReturning block of 22562258\nGetting block 4 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 11698683\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 11698684\nGetting block 5 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 15450821\n  (Using difference cover)\n  Sorting block time: 00:00:07\nReturning block of 15450822\nGetting block 6 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:02\n  Sorting block of length 13105963\n  (Using difference cover)\n  Sorting block time: 00:00:05\nReturning block of 13105964\nGetting block 7 of 7\n  Reserving size (22835728) for bucket\n  Calculating Z arrays\n  Calculating Z arrays time: 00:00:00\n  Entering block accumulator loop:\n  10%\n  20%\n  30%\n  40%\n  50%\n  60%\n  70%\n  80%\n  90%\n  100%\n  Block accumulator loop time: 00:00:01\n  Sorting block of length 17083549\n  (Using difference cover)\n  Sorting block time: 00:00:08\nReturning block of 17083550\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 35736329\nfchr[G]: 60836140\nfchr[T]: 86006802\nfchr[$]: 121790550\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 38992360 bytes to primary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.1.ebwt\nWrote 15223824 bytes to secondary EBWT file: /tmp/tmpn8brh6dt/tmpx_intd9d.rev.2.ebwt\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 121790550\n    bwtLen: 121790551\n    sz: 30447638\n    bwtSz: 30447638\n    lineRate: 6\n    linesPerSide: 1\n    offRate: 5\n    offMask: 0xffffffe0\n    isaRate: -1\n    isaMask: 0xffffffff\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 3805955\n    offsSz: 15223820\n    isaLen: 0\n    isaSz: 0\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 56\n    sideBwtLen: 224\n    numSidePairs: 271854\n    numSides: 543708\n    numLines: 543708\n    ebwtTotLen: 34797312\n    ebwtTotSz: 34797312\n    reverse: 0\nTotal time for backward call to driver() for mirror index: 00:01:38\nbowtie -q   -p 1 -S        -n 2 -e 70 -l 25      --maxbts 125  -k 1  -m 1          --phred33-quals  /tmp/tmpn8brh6dt/tmpx_intd9d /tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat | samtools view -bS > /tmp/tmppm0mar_u/files/d/a/0/dataset_da0ee6ce-4245-4ba0-aef8-df308b8d3368.dat\nFile indexed. Sequence file aligned.\n", "traceback": null, "update_time": "2022-05-27T12:54:17.372290", "user_email": "test@bx.psu.edu"}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_1z5dr64p.sam v. /tmp/history_bam_converted_to_sam_d1cr71dh.sam )\n--- local_file\n+++ history_data\n@@ -1,4130087 +1,413011 @@\n @HD\tVN:1.0\tSO:unsorted\n @SQ\tSN:9\tLN:138394717\n-@PG\tID:Bowtie\tVN:1.2.3\tCL:\"/usr/bin/bowtie-align-s --wrapper basic-0 -p 8 -m 1 -n 2 --seedlen 25 chr9 -q SRR10072568.fastq -S\"\n-@PG\tID:samtools\tPN:samtools\tPP:Bowtie\tVN:1.10\tCL:samtools view -b -S -o test.bam\n-SRR10072568.1\t0\t9\t133020589\t255\t27M\t*\t0\t0\tTGCATGCAAGTTTGCTGAGCTGAAGGA\tCC@FFFFFHHHHHJJJJJJJJJIJJJG\tXA:i:0\tMD:Z:27\tNM:i:0\tXM:i:2\n-SRR10072568.2\t4\t*\t0\t0\t*\t*\t0\t0\tTATAGTGGTGAGTATCCCCG\tCCCFFFFFHHHHHJIIIJJJ\tXM:i:0\n-SRR10072568.3\t4\t*\t0\t0\t*\t*\t0\t0\tATCCCAGCGGGGCCTCCA\t?@?BDBBDH?CH?FDGDA\tXM:i:1\n-SRR10072568.4\t4\t*\t0\t0\t*\t*\t0\t0\tGAGAAAAAACTAGAGGAATACAAACAGAAG\tB@CFFFFFHHHHHJJJJJJJJJIIJJJJJJ\tXM:i:0\n-SRR10072568.5\t4\t*\t0\t0\t*\t*\t0\t0\tGCAAAAAAACGCTAGCCTAGCCAC\t@@@BDBDDHHDHGGBEH?FFHIGI\tXM:i:0\n-SRR10072568.6\t4\t*\t0\t0\t*\t*\t0\t0\tGCGCAATGGATAGCGCATTGG\tCCCFFFFFHHHHHJJJJJJJJ\tXM:i:1\n-SRR10072568.7\t4\t*\t0\t0\t*\t*\t0\t0\tTACCCGTCTATCAGCTGATGTGGGTAA\tCCCFFFFFHHHHHJJJJJJJHIJJCHH\tXM:i:0\n-SRR10072568.8\t4\t*\t0\t0\t*\t*\t0\t0\tAAGGGCCAGCGAGAGCTCACCGGAC\tCCCFFFFFHHHHHJJJJJJJJJJJI\tXM:i:0\n-SRR10072568.9\t4\t*\t0\t0\t*\t*\t0\t0\tTAAGCCCAGATCCTCCC\tCCCFFFFFGHHHHJJJJ\tXM:i:1\n+@PG\tID:Bowtie\tVN:1.2\tCL:\"bowtie-align --wrapper basic-0 -q -p 1 -S -n 2 -e 70 -l 25 --maxbts 125 -k 1 -m 1 --phred33-quals /tmp/tmpn8brh6dt/tmpx_intd9d /tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat\"\n SRR10072568.10\t4\t*\t0\t0\t*\t*\t0\t0\tATAGCTCAGTCGGTAGAGC\tCCCFFFFDHHHHHGIIIIJ\tXM:i:1\n SRR10072568.11\t4\t*\t0\t0\t*\t*\t0\t0\tGGCATTAACGCAAACTCGGCCTACAATAGTGA\tCCCFFFFFHHHHHJJJJJJGI:?HHIJIJIIJ\tXM:i:0\n-SRR10072568.12\t4\t*\t0\t0\t*\t*\t0\t0\tAGGGGGCACCAGTCAGAAGTCCCGAACTGAGG\t@@@FFFFFHHHHHIGHJJJHGHJIGJJIJJJG\tXM:i:0\n-SRR10072568.13\t4\t*\t0\t0\t*\t*\t0\t0\tTCGGAGAATGACTTGAACTTC\t@@CDFFFDDDDHHGGGHIG@H\tXM:i:0\n-SRR10072568.14\t4\t*\t0\t0\t*\t*\t0\t0\tGTATAGTGGTGAGTATCCCCGC\t@@@DDDBDFDFCDEGDEHIEGI\tXM:i:0\n-SRR10072568.15\t4\t*\t0\t0\t*\t*\t0\t0\tCAAGTACCGCCCCGACCTGCGCATGGCAGCCA\t@@CFFFFFHHHGHIGJJJJIJJIJJIIGJIJJ\tXM:i:0\n-SRR10072568.16\t4\t*\t0\t0\t*\t*\t0\t0\tGTGGGGGGGCCGGGCCACCCCTCCCACGGC\t@??B;@D@BBD8BDDDDDBBDDDDD886<B\tXM:i:0\n-SRR10072568.17\t4\t*\t0\t0\t*\t*\t0\t0\tAATACTAGAGAAAGATGAAGCTCTAGAAGA\tCCCFFFFFGHHGHIEHJJJJJJJJIJJIIJ\tXM:i:0\n********\n*SNIP *\n********\n-SRR10072568.4129898\t4\t*\t0\t0\t*\t*\t0\t0\tTAAAGTACTGCGCGACAATATCC\t@CCFFFFFHHHHHJJJIJJJJJJ\tXM:i:0\n-SRR10072568.4129899\t4\t*\t0\t0\t*\t*\t0\t0\tTTGCGAGTACTCAACACCAACATCGATG\t@CCDDDD@FFHHHIGGIIBFAHIEIGG@\tXM:i:0\n-SRR10072568.4129900\t4\t*\t0\t0\t*\t*\t0\t0\tAAATGGATTTTTGGAGCAGGGAG\t<?;BDD?BBDDFFIF?DGFD?G:\tXM:i:1\n-SRR10072568.4129901\t4\t*\t0\t0\t*\t*\t0\t0\tTCGACTGCATAATTTGTGGTAGTGGG\tCCCFFFFFHHGHHJJJHHJGGIIJJJ\tXM:i:0\n-SRR10072568.4129902\t4\t*\t0\t0\t*\t*\t0\t0\tATCTTTGTCAAGGTGTACATCG\tBCCFFFFFHGHHHEGGHIDJIH\tXM:i:0\n-SRR10072568.4129903\t0\t9\t6276649\t255\t30M\t*\t0\t0\tATTGGAACAGTGGGAATCAGCAATTTCGCA\t@@@FD8BAF3AADHGI>EEB?DGGGG22<C\tXA:i:0\tMD:Z:26T3\tNM:i:1\tXM:i:2\n-SRR10072568.4129904\t0\t9\t5093295\t255\t29M\t*\t0\t0\tTCACCTCTAGCATCACCAGTATTAGACAC\tCCCFFFFFHHHFHJJJJJJHGIJJJJ++2\tXA:i:1\tMD:Z:13T12G0G1\tNM:i:3\tXM:i:2\n-SRR10072568.4130033\t4\t*\t0\t0\t*\t*\t0\t0\tGTATAGTGGTGAGTATCCCCG\t==;;DD=BB:A4+2<AEEFIF\tXM:i:0\n-SRR10072568.4130034\t4\t*\t0\t0\t*\t*\t0\t0\tCCAGTGGTGCTTCAACTGGTA\t@@CFFFFFGHHHHJIHIJIIH\tXM:i:0\n-SRR10072568.4130035\t4\t*\t0\t0\t*\t*\t0\t0\tTAAAATGCGTGGCTCAGGCTAGC\t@@@;BDDD@CFFFF<@AC3FFAF\tXM:i:0\n-SRR10072568.4130036\t4\t*\t0\t0\t*\t*\t0\t0\tCTCAGTCGGTAGAGCATGAGA\t@?<DDDFDHDBDFIGIIIGI@\tXM:i:1\n-SRR10072568.4130037\t4\t*\t0\t0\t*\t*\t0\t0\tTCTTGTCACTCCTCCAGCAGTTGTC\t@@@DDDEDFFHHHIIJJIJJCF<HH\tXM:i:0\n-SRR10072568.4130038\t4\t*\t0\t0\t*\t*\t0\t0\tATCCCACTCCTGACACCA\t?<@A??;DDFD?C;E@1C\tXM:i:1\n-SRR10072568.4130039\t4\t*\t0\t0\t*\t*\t0\t0\tCCGGCCGAGGTGGGATCCCGAGGCCTC\t?@@FDDF?FD@FFFGGGHGHFGIJJJJ\tXM:i:0\n-SRR10072568.4130040\t4\t*\t0\t0\t*\t*\t0\t0\tTTAAATGGGTAAGAAGCCCGG\t?@@DBBD8:=4CFHI9@CFEA\tXM:i:0\n-SRR10072568.4130041\t4\t*\t0\t0\t*\t*\t0\t0\tGTGGGGGGGCCGGGCCACCCCTCCCACGGCGCGACC\t<@@?D<8;1@3B00-6@8/6&85<-3+)69689@BB\tXM:i:0\n-SRR10072568.4130042\t4\t*\t0\t0\t*\t*\t0\t0\tGCCGGCCGAGGTGGGATCCCGAGGCCTC\t@@CFFFFFHFF@CFGIJJGGIGGIAFGH\tXM:i:0\n-SRR10072568.4130043\t4\t*\t0\t0\t*\t*\t0\t0\tACAGTCACATACAGAGATGGCC\t@@@FDFFFHFHHGHIJJIIIII\tXM:i:0\n-SRR10072568.4130044\t4\t*\t0\t0\t*\t*\t0\t0\tACGCGAACTCGGCCTACAATAGTGA\tCCCFFFFFHHHGHJJJJJGHHJIII\tXM:i:0\n-SRR10072568.4130045\t4\t*\t0\t0\t*\t*\t0\t0\tATTCTTCATGTTTCTGAAAATGTGATATTC\t?@BFDFFFHHFHHJGIJJGFIIEJJJJ,<A\tXM:i:0\n-SRR10072568.4130046\t4\t*\t0\t0\t*\t*\t0\t0\tCTCGACTGCATAATTTGTGGTAGTGGGGGA\t@CCBDFFFHHHDHIIGHHIIJ@HBGGIJJF\tXM:i:0\n-SRR10072568.4130047\t4\t*\t0\t0\t*\t*\t0\t0\tGCCACGCAGCCGCCACCGCTG\t?@@ADDDD@FH<DGGIIEFCD\tXM:i:0\n-SRR10072568.4130048\t4\t*\t0\t0\t*\t*\t0\t0\tTCGACCCGTAAAGCGA\t=??BBD:@088A?4CE\tXM:i:1\n+SRR10072568.4130073\t16\t9\t86423013\t255\t23M\t*\t0\t0\tTCTCCTATTTCCAAAAATCCATT\tIIIGIIIEIIHHHHHDFFFFCC@\tXA:i:0\tMD:Z:23\tNM:i:0\n+SRR10072568.4130077\t16\t9\t16371429\t255\t18M\t*\t0\t0\tTGGCGTAGTCGGCAGGAT\tJJIHIHHHHHFFFFFCCC\tXA:i:2\tMD:Z:3A1C12\tNM:i:2\n"], "status": "failure", "problem_type": "galaxy.tool_util.verify.interactor.JobOutputsError", "problem_log": "  File \"/home/jack/anaconda3/envs/ribogalaxy/lib/python3.9/unittest/case.py\", line 59, in testPartExecutor\n    yield\n  File \"/home/jack/anaconda3/envs/ribogalaxy/lib/python3.9/unittest/case.py\", line 592, in run\n    self._callTestMethod(testMethod)\n  File \"/home/jack/anaconda3/envs/ribogalaxy/lib/python3.9/unittest/case.py\", line 550, in _callTestMethod\n    method()\n  File \"/tmp/tmppm0mar_u/galaxy-dev/test/functional/test_toolbox.py\", line 98, in test_tool\n    self.do_it(tool_version=tool_version, test_index=test_index)\n  File \"/tmp/tmppm0mar_u/galaxy-dev/test/functional/test_toolbox.py\", line 35, in do_it\n    verify_tool(tool_id, self.galaxy_interactor, resource_parameters=resource_parameters, test_index=test_index, tool_version=tool_version, register_job_data=register_job_data)\n  File \"/tmp/tmppm0mar_u/galaxy-dev/lib/galaxy/tool_util/verify/interactor.py\", line 1127, in verify_tool\n    raise e\n  File \"/tmp/tmppm0mar_u/galaxy-dev/lib/galaxy/tool_util/verify/interactor.py\", line 1123, in verify_tool\n    job_stdio = _verify_outputs(testdef, test_history, jobs, data_list, data_collection_list, galaxy_interactor, quiet=quiet)\n  File \"/tmp/tmppm0mar_u/galaxy-dev/lib/galaxy/tool_util/verify/interactor.py\", line 1299, in _verify_outputs\n    raise JobOutputsError(found_exceptions, job_stdio)\nOutput output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_1z5dr64p.sam v. /tmp/history_bam_converted_to_sam_d1cr71dh.sam )\n--- local_file\n+++ history_data\n@@ -1,4130087 +1,413011 @@\n @HD\tVN:1.0\tSO:unsorted\n @SQ\tSN:9\tLN:138394717\n-@PG\tID:Bowtie\tVN:1.2.3\tCL:\"/usr/bin/bowtie-align-s --wrapper basic-0 -p 8 -m 1 -n 2 --seedlen 25 chr9 -q SRR10072568.fastq -S\"\n-@PG\tID:samtools\tPN:samtools\tPP:Bowtie\tVN:1.10\tCL:samtools view -b -S -o test.bam\n-SRR10072568.1\t0\t9\t133020589\t255\t27M\t*\t0\t0\tTGCATGCAAGTTTGCTGAGCTGAAGGA\tCC@FFFFFHHHHHJJJJJJJJJIJJJG\tXA:i:0\tMD:Z:27\tNM:i:0\tXM:i:2\n-SRR10072568.2\t4\t*\t0\t0\t*\t*\t0\t0\tTATAGTGGTGAGTATCCCCG\tCCCFFFFFHHHHHJIIIJJJ\tXM:i:0\n-SRR10072568.3\t4\t*\t0\t0\t*\t*\t0\t0\tATCCCAGCGGGGCCTCCA\t?@?BDBBDH?CH?FDGDA\tXM:i:1\n-SRR10072568.4\t4\t*\t0\t0\t*\t*\t0\t0\tGAGAAAAAACTAGAGGAATACAAACAGAAG\tB@CFFFFFHHHHHJJJJJJJJJIIJJJJJJ\tXM:i:0\n-SRR10072568.5\t4\t*\t0\t0\t*\t*\t0\t0\tGCAAAAAAACGCTAGCCTAGCCAC\t@@@BDBDDHHDHGGBEH?FFHIGI\tXM:i:0\n-SRR10072568.6\t4\t*\t0\t0\t*\t*\t0\t0\tGCGCAATGGATAGCGCATTGG\tCCCFFFFFHHHHHJJJJJJJJ\tXM:i:1\n-SRR10072568.7\t4\t*\t0\t0\t*\t*\t0\t0\tTACCCGTCTATCAGCTGATGTGGGTAA\tCCCFFFFFHHHHHJJJJJJJHIJJCHH\tXM:i:0\n-SRR10072568.8\t4\t*\t0\t0\t*\t*\t0\t0\tAAGGGCCAGCGAGAGCTCACCGGAC\tCCCFFFFFHHHHHJJJJJJJJJJJI\tXM:i:0\n-SRR10072568.9\t4\t*\t0\t0\t*\t*\t0\t0\tTAAGCCCAGATCCTCCC\tCCCFFFFFGHHHHJJJJ\tXM:i:1\n+@PG\tID:Bowtie\tVN:1.2\tCL:\"bowtie-align --wrapper basic-0 -q -p 1 -S -n 2 -e 70 -l 25 --maxbts 125 -k 1 -m 1 --phred33-quals /tmp/tmpn8brh6dt/tmpx_intd9d /tmp/tmppm0mar_u/files/f/0/f/dataset_f0f066ef-ca55-477a-8cc7-b9427f9fcda9.dat\"\n SRR10072568.10\t4\t*\t0\t0\t*\t*\t0\t0\tATAGCTCAGTCGGTAGAGC\tCCCFFFFDHHHHHGIIIIJ\tXM:i:1\n SRR10072568.11\t4\t*\t0\t0\t*\t*\t0\t0\tGGCATTAACGCAAACTCGGCCTACAATAGTGA\tCCCFFFFFHHHHHJJJJJJGI:?HHIJIJIIJ\tXM:i:0\n-SRR10072568.12\t4\t*\t0\t0\t*\t*\t0\t0\tAGGGGGCACCAGTCAGAAGTCCCGAACTGAGG\t@@@FFFFFHHHHHIGHJJJHGHJIGJJIJJJG\tXM:i:0\n-SRR10072568.13\t4\t*\t0\t0\t*\t*\t0\t0\tTCGGAGAATGACTTGAACTTC\t@@CDFFFDDDDHHGGGHIG@H\tXM:i:0\n-SRR10072568.14\t4\t*\t0\t0\t*\t*\t0\t0\tGTATAGTGGTGAGTATCCCCGC\t@@@DDDBDFDFCDEGDEHIEGI\tXM:i:0\n-SRR10072568.15\t4\t*\t0\t0\t*\t*\t0\t0\tCAAGTACCGCCCCGACCTGCGCATGGCAGCCA\t@@CFFFFFHHHGHIGJJJJIJJIJJIIGJIJJ\tXM:i:0\n-SRR10072568.16\t4\t*\t0\t0\t*\t*\t0\t0\tGTGGGGGGGCCGGGCCACCCCTCCCACGGC\t@??B;@D@BBD8BDDDDDBBDDDDD886<B\tXM:i:0\n-SRR10072568.17\t4\t*\t0\t0\t*\t*\t0\t0\tAATACTAGAGAAAGATGAAGCTCTAGAAGA\tCCCFFFFFGHHGHIEHJJJJJJJJIJJIIJ\tXM:i:0\n********\n*SNIP *\n********\n-SRR10072568.4129898\t4\t*\t0\t0\t*\t*\t0\t0\tTAAAGTACTGCGCGACAATATCC\t@CCFFFFFHHHHHJJJIJJJJJJ\tXM:i:0\n-SRR10072568.4129899\t4\t*\t0\t0\t*\t*\t0\t0\tTTGCGAGTACTCAACACCAACATCGATG\t@CCDDDD@FFHHHIGGIIBFAHIEIGG@\tXM:i:0\n-SRR10072568.4129900\t4\t*\t0\t0\t*\t*\t0\t0\tAAATGGATTTTTGGAGCAGGGAG\t<?;BDD?BBDDFFIF?DGFD?G:\tXM:i:1\n-SRR10072568.4129901\t4\t*\t0\t0\t*\t*\t0\t0\tTCGACTGCATAATTTGTGGTAGTGGG\tCCCFFFFFHHGHHJJJHHJGGIIJJJ\tXM:i:0\n-SRR10072568.4129902\t4\t*\t0\t0\t*\t*\t0\t0\tATCTTTGTCAAGGTGTACATCG\tBCCFFFFFHGHHHEGGHIDJIH\tXM:i:0\n-SRR10072568.4129903\t0\t9\t6276649\t255\t30M\t*\t0\t0\tATTGGAACAGTGGGAATCAGCAATTTCGCA\t@@@FD8BAF3AADHGI>EEB?DGGGG22<C\tXA:i:0\tMD:Z:26T3\tNM:i:1\tXM:i:2\n-SRR10072568.4129904\t0\t9\t5093295\t255\t29M\t*\t0\t0\tTCACCTCTAGCATCACCAGTATTAGACAC\tCCCFFFFFHHHFHJJJJJJHGIJJJJ++2\tXA:i:1\tMD:Z:13T12G0G1\tNM:i:3\tXM:i:2\n-SRR10072568.4130033\t4\t*\t0\t0\t*\t*\t0\t0\tGTATAGTGGTGAGTATCCCCG\t==;;DD=BB:A4+2<AEEFIF\tXM:i:0\n-SRR10072568.4130034\t4\t*\t0\t0\t*\t*\t0\t0\tCCAGTGGTGCTTCAACTGGTA\t@@CFFFFFGHHHHJIHIJIIH\tXM:i:0\n-SRR10072568.4130035\t4\t*\t0\t0\t*\t*\t0\t0\tTAAAATGCGTGGCTCAGGCTAGC\t@@@;BDDD@CFFFF<@AC3FFAF\tXM:i:0\n-SRR10072568.4130036\t4\t*\t0\t0\t*\t*\t0\t0\tCTCAGTCGGTAGAGCATGAGA\t@?<DDDFDHDBDFIGIIIGI@\tXM:i:1\n-SRR10072568.4130037\t4\t*\t0\t0\t*\t*\t0\t0\tTCTTGTCACTCCTCCAGCAGTTGTC\t@@@DDDEDFFHHHIIJJIJJCF<HH\tXM:i:0\n-SRR10072568.4130038\t4\t*\t0\t0\t*\t*\t0\t0\tATCCCACTCCTGACACCA\t?<@A??;DDFD?C;E@1C\tXM:i:1\n-SRR10072568.4130039\t4\t*\t0\t0\t*\t*\t0\t0\tCCGGCCGAGGTGGGATCCCGAGGCCTC\t?@@FDDF?FD@FFFGGGHGHFGIJJJJ\tXM:i:0\n-SRR10072568.4130040\t4\t*\t0\t0\t*\t*\t0\t0\tTTAAATGGGTAAGAAGCCCGG\t?@@DBBD8:=4CFHI9@CFEA\tXM:i:0\n-SRR10072568.4130041\t4\t*\t0\t0\t*\t*\t0\t0\tGTGGGGGGGCCGGGCCACCCCTCCCACGGCGCGACC\t<@@?D<8;1@3B00-6@8/6&85<-3+)69689@BB\tXM:i:0\n-SRR10072568.4130042\t4\t*\t0\t0\t*\t*\t0\t0\tGCCGGCCGAGGTGGGATCCCGAGGCCTC\t@@CFFFFFHFF@CFGIJJGGIGGIAFGH\tXM:i:0\n-SRR10072568.4130043\t4\t*\t0\t0\t*\t*\t0\t0\tACAGTCACATACAGAGATGGCC\t@@@FDFFFHFHHGHIJJIIIII\tXM:i:0\n-SRR10072568.4130044\t4\t*\t0\t0\t*\t*\t0\t0\tACGCGAACTCGGCCTACAATAGTGA\tCCCFFFFFHHHGHJJJJJGHHJIII\tXM:i:0\n-SRR10072568.4130045\t4\t*\t0\t0\t*\t*\t0\t0\tATTCTTCATGTTTCTGAAAATGTGATATTC\t?@BFDFFFHHFHHJGIJJGFIIEJJJJ,<A\tXM:i:0\n-SRR10072568.4130046\t4\t*\t0\t0\t*\t*\t0\t0\tCTCGACTGCATAATTTGTGGTAGTGGGGGA\t@CCBDFFFHHHDHIIGHHIIJ@HBGGIJJF\tXM:i:0\n-SRR10072568.4130047\t4\t*\t0\t0\t*\t*\t0\t0\tGCCACGCAGCCGCCACCGCTG\t?@@ADDDD@FH<DGGIIEFCD\tXM:i:0\n-SRR10072568.4130048\t4\t*\t0\t0\t*\t*\t0\t0\tTCGACCCGTAAAGCGA\t=??BBD:@088A?4CE\tXM:i:1\n+SRR10072568.4130073\t16\t9\t86423013\t255\t23M\t*\t0\t0\tTCTCCTATTTCCAAAAATCCATT\tIIIGIIIEIIHHHHHDFFFFCC@\tXA:i:0\tMD:Z:23\tNM:i:0\n+SRR10072568.4130077\t16\t9\t16371429\t255\t18M\t*\t0\t0\tTGGCGTAGTCGGCAGGAT\tJJIHIHHHHHFFFFFCCC\tXA:i:2\tMD:Z:3A1C12\tNM:i:2\n\n-------------------- >> begin captured logging << --------------------\nmultipart.multipart: DEBUG: Calling on_field_start with no data\nmultipart.multipart: DEBUG: Calling on_field_name with data[0:4]\nmultipart.multipart: DEBUG: Calling on_field_data with data[5:59]\nmultipart.multipart: DEBUG: Calling on_field_end with no data\nmultipart.multipart: DEBUG: Calling on_end with no data\n--------------------- >> end captured logging << ---------------------"}}], "summary": {"num_tests": 1, "num_failures": 1, "num_errors": 0, "num_skips": 0}, "exit_code": 1}